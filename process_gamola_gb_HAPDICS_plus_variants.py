#!/usr/bin/env python






#### -------------- gamola2 with RNASeq-output: under /media/jhuang/Elements/Data_Tam_RNASeq --------------------------
## --1-- GAMOLA2_STEP1: construct env
#ln -s /media/jhuang/Titisee/GAMOLA2 GAMOLA2
##under ~/DATA/Data_Tam_RNASeq/GAMOLA2
#construct_Results.sh #or clean_Results.sh

## --2-- prepare fasta and model
## under results/reference_genome
##paaI
##https://www.biostars.org/p/222028/
#grep "ID=gene" GCF_002811175.1_ASM281117v1_genomic.gff > GCF_002811175.gff
#bedtools getfasta -fi GCF_002811175.1_ASM281117v1_genomic.fna -bed GCF_002811175.gff -s -fo GCF_002811175.fna -name
#cut -f1-2 -d$'\t' GCF_002811175.gff > f1-2
#cut -f4- -d$'\t' GCF_002811175.gff > f4-
#cut -f9-9 -d$'\t' GCF_002811175.gff > f9
#cut -f2-2 -d';' f9 > f9_2
#paste -d$"\t" f1-2 f9_2 f4- > GCF_002811175_.gff
#grep -v "pseudo=true" GCF_002811175_.gff > GCF_002811175__.gff
##grep -v "gene_biotype=RNase_P_RNA"
#grep -v "RNA" GCF_002811175__.gff > GCF_002811175___.gff   #3702
#grep "gene_biotype=protein_coding" GCF_002811175.gff > GCF_002811175___.gff
#bedtools getfasta -fi GCF_002811175.1_ASM281117v1_genomic.fna -bed GCF_002811175___.gff -s -fo GCF_002811175.fna -name

## --3-- preparing gene_models
#echo ">BIT33" > BIT33.fa;
#merge_seq.py GCF_002811175.fna >> BIT33.fa;
##NOTE that samtools faidx GCF_002811175.fna;  GCF_002811175.fna.fai has some bugs --> not correct!!!
#bioawk -c fastx '{ print $name, length($seq) }' < GCF_002811175.fna > length.txt 
##check the length are always 3 times of nt, [BIT33_RS12745   1096] is not correct!
## search delete the first base in BIT33_RS12745 in GCF_002811175.fna: rerunning this block.
## WKLILI*TN*KT* LIVAKHYGGIFDYDLKK,  DELETE 39 nt bases at the beginning in GCF_002811175.fna. 1056
##comparing the protein with #https://www.ncbi.nlm.nih.gov/protein/WP_071543072.1?report=genbank&log$=prottop&blast_rank=1&RID=H1772H02014
#generate_gene_model.py length.txt > ../../GAMOLA2/Results/gene_models/BIT33.fa.combined;
##generate_gene_model.py length.txt > model.temp4
##cp model.temp4 ../../GAMOLA2/Results/gene_models/BIT33.fa.combined;
#cp BIT33.fa ../../GAMOLA2/Input_sequences
## MODIFYING the start_codons in source code
##grep "start" Error.log | sort -u > no_classic_startcodon.txt
##ata, atc, att, ctg

## --4-- running GAMOLA2, select only one type annotation, for example blastp (Swissprot or NCBI) --> HD04_comp1_SwissProt__.fa.gb and HD04_comp1_NCBI__.fa.gb
##https://www.biostars.org/p/336016/
#cd GAMOLA2
#./Gamola.pl

## --5-- analyse GAMOLA2-results 
##TIGR_annotation, SwissProt_annotation, NCBI_annotation, Prokka_annotation,  SwissProt_Product
##using the first as the SNP calling!

## prepare TIGRfam__.fa.gb
#cp GAMOLA2/Consolidated_results/HD04_comp1.fa/HD04_comp1.fa.gb HD04_comp1/gamola2/HD04_comp1_TIGRfam.fa.gb
#cd HD04_comp1/gamola2/
#awk '{print $0 "ORIGIN"> "file" NR}' RS='ORIGIN'  example.fa.gb
#sed -i 's/</ /g' file2
#sed -i 's/^ //g' file2
#cat file1 file2 > example_.fa.gb
## manually clean the empty lines after 'ORIGIN' and the last line containing 'ORIGIN'
#update_locustag.py example_.fa.gb GCF_002811175.fna.fai > example__.fa.gb
##vim ~/DATA/Data_Anna12_HAPDICS_final/HD21_comp/gamola2/pan_genome_reference_.fa.fai (2571 reaocrds)
##group_1023      186     12      60      61
##group_2042      1263    214     60      61
##tyrA    1089    1505    60      61


##cp GAMOLA2/Consolidated_results/BIT33.fa/BIT33.fa.gb BIT33.fa.gb
#awk '{print $0 "ORIGIN"> "file" NR}' RS='ORIGIN' BIT33.fa.gb
#sed -i 's/</ /g' file2
#sed -i 's/^ //g' file2
#cat file1 file2 > BIT33_all_.fa.gb
#update_locustag.py BIT33_all_.fa.gb ./results/reference_genome/GCF_002811175.fna.fai > BIT33_all__.fa.gb
#diff BIT33__.fa.gb BIT33_all__.fa.gb
## manually clean the empty lines after 'ORIGIN' and the last line containing 'ORIGIN'


## --6-- generating the csv file for biologist
## Input-format: Data_Tam_RNASeq/format("","baseMean","log2FoldChange","lfcSE","stat","pvalue","padj") generated by R-scripts
## Output-format: "BIT33 Gene ID","Swiss-Prot Annotation","COG Code","COG Annotation","PFAM Annotation","log2 Fold Change","Fold Change","adj.P.Value","Translation"
#process_gamola_gb.py adeIJ_ko_vs_wt_background.txt BIT33__.fa.gb > annotated_degenes.csv
##delete the empty three columns.

# --7-- csv to xls ----
#~/Tools/csv2xls-0.4/csv_to_xls.py craA_ko_vs_wt_annotated_degenes.csv adeIJ_ko_vs_wt_annotated_degenes.csv adeIJ_ko_vs_craA_ko_annotated_degenes.csv -d$',' -o annotated_degenes.xls




#### -------------- gamola2 with roary: under e.g. ~/DATA/Data_Anna12_HAPDICS_final/HD21_comp/gamola2 ----------------------------
'''
for sample in HD59_comp; do
## --1-- prepare fa.fai ----
cp ../roary/pan_genome_reference.fa ./
format_fasta_header.py pan_genome_reference.fa > pan_genome_reference_.fa
samtools faidx pan_genome_reference_.fa

# --2-- update_locustag using fa.fai ----
cp ../../GAMOLA2/Consolidated_results/${sample}.fa/${sample}.fa.gb ./
awk '{print $0 "ORIGIN"> "file" NR}' RS='ORIGIN' ${sample}.fa.gb
sed -i 's/</ /g' file2
sed -i 's/^ //g' file2
cat file1 file2 > ${sample}_.fa.gb
update_locustag.py ${sample}_.fa.gb pan_genome_reference_.fa.fai > ${sample}__.fa.gb
## manually clean the empty lines after 'ORIGIN' and the last line containing 'ORIGIN'
done

## --3-- update_locustag using fa.fai ----
## Input-format: roary/gene_presence_absence.csv
## Output-format: "Group ID","NCBI Annotation","Root","COG Code","COG Annotation","PFAM Annotation","Prokka Annotation","No. isolates","Isolate1","Isolate2","Translation"'
## CORRECT RESULTS, checking the sample order in ../roary/gene_presence_absence.csv, e.g. "HD26-5","HD26N1"
#process_gamola_gb_HAPDICS_plus_contigid.py ../roary/gene_presence_absence.csv HD04_comp1__.fa.gb ../prokka/HD04-03/HD04-03.gff ../prokka/HD4N15/HD4N15.gff > annotated_gene_presence_absence.csv
#process_gamola_gb_HAPDICS_plus_contigid.py ../roary/gene_presence_absence.csv HD04_comp2__.fa.gb ../prokka/HD04-08/HD04-08.gff ../prokka/HD4N01/HD4N01.gff > annotated_gene_presence_absence.csv
#process_gamola_gb_HAPDICS_plus_contigid.py ../roary/gene_presence_absence.csv HD21_comp__.fa.gb ../prokka/HD21-7/HD21-7.gff ../prokka/HD21N14/HD21N14.gff > annotated_gene_presence_absence.csv
#process_gamola_gb_HAPDICS_plus_contigid.py ../roary/gene_presence_absence.csv HD26_comp__.fa.gb ../prokka/HD26-5/HD26-5.gff ../prokka/HD26N1/HD26N1.gff > annotated_gene_presence_absence.csv
#process_gamola_gb_HAPDICS_plus_contigid.py ../roary/gene_presence_absence.csv HD27_comp__.fa.gb ../prokka/HD27-3/HD27-3.gff ../prokka/HD27N1/HD27N1.gff > annotated_gene_presence_absence.csv
#process_gamola_gb_HAPDICS_plus_contigid.py ../roary/gene_presence_absence.csv HD29_comp__.fa.gb ../prokka/HD29-5/HD29-5.gff ../prokka/HD29N4/HD29N4.gff > annotated_gene_presence_absence.csv
#process_gamola_gb_HAPDICS_plus_contigid.py ../roary/gene_presence_absence.csv HD33_comp__.fa.gb ../prokka/HD33-2/HD33-2.gff ../prokka/HD33N22/HD33N22.gff > annotated_gene_presence_absence.csv
#process_gamola_gb_HAPDICS_plus_contigid.py ../roary/gene_presence_absence.csv HD59_comp__.fa.gb ../prokka/HD59-01/HD59-01.gff ../prokka/HD59N26/HD59N26.gff > annotated_gene_presence_absence.csv
## with libreoffice 'save as csv' can delete all sign '"'

# --4-- csv to xls ----
#cp ../HD04_comp1/gamola2/annotated_gene_presence_absence.csv HD04_comp1.csv
#cp ../HD04_comp2/gamola2/annotated_gene_presence_absence.csv HD04_comp2.csv
#cp ../HD21_comp/gamola2/annotated_gene_presence_absence.csv HD21_comp.csv
#cp ../HD26_comp/gamola2/annotated_gene_presence_absence.csv HD26_comp.csv
#cp ../HD27_comp/gamola2/annotated_gene_presence_absence.csv HD27_comp.csv
#cp ../HD29_comp/gamola2/annotated_gene_presence_absence.csv HD29_comp.csv
#cp ../HD33_comp/gamola2/annotated_gene_presence_absence.csv HD33_comp.csv
#cp ../HD59_comp/gamola2/annotated_gene_presence_absence.csv HD59_comp.csv
##conda activate bengal3_ac3 for running csv_to_xls.py
#~/Tools/csv2xls-0.4/csv_to_xls.py HD04_comp1.csv HD04_comp2.csv HD21_comp.csv HD26_comp.csv HD27_comp.csv HD29_comp.csv HD33_comp.csv HD59_comp.csv -d$',' -o gene_presence_absence_comparative.xls

#DEBUG: 1-(5-phosphoribosyl)-5-
#group_596,1-(5-phosphoribosyl)-5-[(5-phosphoribosylamino)methylideneamino] imidazole-4-carboxamide isomerase ,Staphylococcus epidermidis ATCC 12228,E,COG2014: COG0106 Phosphoribosylformimino-5- aminoimidazole carboxamide ribonucleotide (ProFAR) isomerase ,"His_biosynth, Histidine biosynthesis protein",TIGR00007: 1-(5-phosphoribosyl)-5-[(5-phosphoribosylamino)methylideneamino]imidazole-4-carboxamide isomerase,2,HD04-03_01033,HD4N15_01036,MIDLWPAIDLINSTSVRLTEGKYDTKEKMEKSVEDSIRFYSQFKCVKRIHIVDLIGAKAKEVKEFDYIRSLRKVTTKPIEVGGGIRSKQTIENYIHSGIDYCIVGTKGIQDIEWLTHMTHQFPNKLYLSVDAFGEKIKINGWKEDAKLNLFDYVAKIEHLPLGGVIYTDISKDGKLSGPNFDLTGRLALYTSLPVIASGGIRHQEDLFRLESLNVHAAIVGKAAHLDEFWEGLS*

'''


import sys
import pprint
#from sets import Set
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio.Alphabet import generic_protein, generic_dna
from Bio import SeqFeature
import re

pp = pprint.PrettyPrinter(indent=4)

input_for_reformatting = sys.argv[1]
gbk_filename = sys.argv[2]
#ncbi_gbk_filename = sys.argv[3]
#tigrfam_gbk_filename = sys.argv[4]


locustag_gene = {}
locustag_product = {}
locustag_translation = {}
locustag_COGmatch = {}
locustag_PFAMmatch = {}
locustag_TIGRmatch = {}

bioGenbankRecord = enumerate(SeqIO.parse(gbk_filename, "genbank"))
for (index, seq_record) in bioGenbankRecord:
##http://biopython.org/wiki/SeqRecord
#ncbi_bioGenbankRecord = enumerate(SeqIO.parse(ncbi_gbk_filename, "genbank"))
#for (index, seq_record) in ncbi_bioGenbankRecord:
    #print("index %i, ID = %s, length %i, with %i features"
    #      % (index, seq_record.id, len(seq_record.seq), len(seq_record.features)))
    #if len(seq_record.features) > 1:
    #    for feature in seq_record.features:
    #        pp.pprint(feature)

    ##assembly_gap
    ##source
    ##repeat_region
    ##CDS
    ##type: CDS
    ##location: [73:337](-)
    ##qualifiers:
    ##    Key: codon_start, Value: ['1']
    ##    Key: gene, Value: ['rplU_2']
    ##    Key: inference, Value: ['ab initio prediction:Prodigal:2.6', 'similar to AA sequence:UniProtKB:P26908']
    ##    Key: locus_tag, Value: ['FOLHONMB_02350']
    ##    Key: product, Value: ['50S ribosomal protein L21']
    ##    Key: transl_table, Value: ['11']
    ##    Key: translation, Value: ['MGQAIYVEKLDVEAGEKVVFDEVILVGGESTKVGAPTVAGATVEGTVEKHGKQKKVVTFKYKPKKHSHRKQGHRQPYTKVVIDAINA']
    if len(seq_record.features) > 1:
        locustag = ""
        CDS_start_pos = -1
        CDS_end_pos = -2
        for feature in seq_record.features:
          if feature.type == 'CDS':     # or feature.type == 'rRNA' or feature.type == 'tRNA' or feature.type == 'tmRNA':
            if "locus_tag" in feature.qualifiers:
                locustag = feature.qualifiers['locus_tag'][0]
                CDS_start_pos = feature.location.start.position
                CDS_end_pos = feature.location.end.position
                #print CDS_start_pos
                #print CDS_end_pos

            #151100..151093 --> 151093..151100
            #2809251..2806589 --> 2806589..2809251
            #3037667..3036778 --> 3036778..3037667
            #3385735..3385344 --> 3385344..3385735
            if "gene" in feature.qualifiers:
                #TODO: delete the last _number  : s.rfind('l')
                gene_string = feature.qualifiers['gene'][0]
                #print gene_string
                # if not find: the last char will be deleted.
                locustag_gene[locustag]=gene_string[:gene_string.rfind('_')]
            if "product" in feature.qualifiers:
                locustag_product[locustag]=feature.qualifiers['product'][0]
            if "translation" in feature.qualifiers:
                #print(feature.qualifiers['translation'])
                locustag_translation[locustag]=feature.qualifiers['translation'][0]
          elif (feature.type == 'COG_match') and (feature.location.start.position >= CDS_start_pos) and (feature.location.end.position <= CDS_end_pos):
            if "product" in feature.qualifiers:
                cog_string = feature.qualifiers['product'][0]
                #print(" ".join(cog_string.split(" ")[:-3]))
                #[X]COG2014: COG5527 Protein involved in initiation of plasmid replication  -3
                #[X]COG2014: COG5527 Protein involved in initiation of plasmid replication  Length=316 Score=399   -1
                #cog annotation
                locustag_COGmatch[locustag]= " ".join(cog_string.split(" ")[:-3])

               
          elif (feature.type == 'PFAM_match') and (feature.location.start.position >= CDS_start_pos) and (feature.location.end.position <= CDS_end_pos):
            if "product" in feature.qualifiers:
                if locustag in locustag_PFAMmatch:
                    locustag_PFAMmatch[locustag].append(feature.qualifiers['product'][0])
                else:
                    locustag_PFAMmatch[locustag] = [feature.qualifiers['product'][0]]
          elif (feature.type == 'TIGR_match') and (feature.location.start.position >= CDS_start_pos) and (feature.location.end.position <= CDS_end_pos):
            if "product" in feature.qualifiers:
                #print(feature.qualifiers['product'][0])
                if locustag in locustag_TIGRmatch:
                    locustag_TIGRmatch[locustag].append(feature.qualifiers['product'][0])
                else:
                    locustag_TIGRmatch[locustag] = [feature.qualifiers['product'][0]]

#pp.pprint(locustag_TIGRmatch)
#    'group_2293': [   'spoVE; GO:0030436 GO:0009252 GO:0016021 GO:0003674',
#                      'spoVE; GO:0030436 GO:0009252 GO:0016021 GO:0003674',
#                      'ftsW; GO:0051301 GO:0016021 GO:0009252 GO:0003674'],







#locustag_gene = {}
#locustag_product = {}
#locustag_translation = {}
#locustag_COGmatch = {}
#locustag_PFAMmatch = {}
#locustag_TIGRmatch = {}

#CHR     POS     4N11    4N14    HD04-01 HD04-02 HD04-03 HD04-04 HD04-05 HD04-06 HD04-07 HD04-08 HD04-09 HD04-10 HD4N01  HD4N12  HD4N15  HD4N2   HD4N6   HD4N7   HD4N8   
#LOCUS_TAG       GENE    PRODUCT EFFECT
#seq-seq-pan     55642   C       C       C       C       C       C       C       C       C       C       C       C       C       T       C       T       T       T       T       
#ssp_cons_00052  yqfL_1  Putative pyruvate, phosphate dikinase regulatory protein        stop_gained c.115C>T p.Arg39*
lines = open(input_for_reformatting)
padj = 0.0
for line in lines:
    if not line.startswith("CHR"):
        #print line
        locus_tag = line.split("\t")[-9].strip()
        locus_tag = locus_tag.strip("\"")    #BIT33 Gene ID, ssp_cons_00052
        
        #print(locus_tag)
        blast_gene = ""
        if locus_tag in locustag_gene:
            blast_gene = locustag_gene[locus_tag]  
            
        blast_product = ""
        blast_product_1 = ""
        blast_product_2 = ""
        if locus_tag in locustag_product:
            #print locus_tag
            blast_product = locustag_product[locus_tag]
            #print blast_product
            blast_product_splited = blast_product.split("]")[0]
            bpss = blast_product_splited
            #print("bpss=%s" % bpss)
            blast_product_1 = bpss.rstrip()
        translated_seq = ""
        if locus_tag in locustag_translation:
            translated_seq = locustag_translation[locus_tag]
        cogmatch = ""
        cogcode = ""
        if locus_tag in locustag_COGmatch:
            cogmatch = locustag_COGmatch[locus_tag]
            #if cogmatch:
            cogmatch_splited = cogmatch.split("]")
            cogmatch = cogmatch_splited[1]
            cogcode = cogmatch_splited[0].lstrip("[")
        pfammatch = ""
        if locus_tag in locustag_PFAMmatch:
            pfammatch = " ".join(locustag_PFAMmatch[locus_tag][0].split(" ")[:-2])
        tigrmatch = ""
        if locus_tag in locustag_TIGRmatch:
            tigrmatch = locustag_TIGRmatch[locus_tag][0].split(";")[0]

        #tokens = re.split(r'\t+', line.strip())
        #-blast_product_1, 
        print("%s\t\"%s\"\t\"%s\"\t\"%s\"\t\"%s\"\t\"%s\"" % (line.strip(), cogcode, cogmatch, pfammatch.split('_')[0], tigrmatch.split('_')[0], translated_seq))
    else: 
        ##print('"GroupId","SwissProt_Annotation","NCBI_Annotation","Prokka_Annotation","SwissProt_Product","NCBI_Product","No. isolates","No. sequences","Avg sequences per isolate","Genome Fragment","Order within Fragment","Accessory Fragment","Accessory Order with Fragment","QC","Min group size nuc","Max group size nuc","Avg group size nuc","HD04-03","HD4N15","Translation"')
        #print('"Group ID","NCBI Annotation","Root","COG Code","COG Annotation","PFAM Annotation","Prokka Annotation","No. isolates","Gene_id in isolate 1 (contig_id, start, end, strand)","Gene_id in isolate 2 (contig_id, start, end, strand)","Translation"')
        #print(line)
        tokens = re.split(r'\t+', line.strip())
        print("%s\tCOG Code\tCOG Annotation\tPFAM Annotation\tTIGR Annotation\tTranslation" % line.strip())


###      BIT33 Gene ID | Annotation | COG Annotation | log2 Fold Change | Fold Change | P-Value 
##round(2**(-0.11),2)
#print(len(locustag_COGmatch))
#print(len(locustag_PFAMmatch))
#print(len(locustag_TIGRmatch))







